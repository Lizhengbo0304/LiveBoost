<ResourceDictionary xmlns = "http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x = "http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:hc = "https://handyorg.github.io/handycontrol"
                    xmlns:system = "clr-namespace:System;assembly=System.Runtime" >
    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source = "pack://application:,,,/HandyControl;component/Themes/theme.xaml" />
        <ResourceDictionary Source = "pack://application:,,,/LiveBoost.Toolkit;component/Themes/theme.xaml" />
    </ResourceDictionary.MergedDictionaries>

    <!--下拉项基样式-->
    <Style x:Key = "FlyComboBoxItemStyle" TargetType = "ComboBoxItem" >
        <Setter Property = "SnapsToDevicePixels" Value = "True" />
        <Setter Property = "Padding" Value = "{StaticResource DefaultControlPadding}" />
        <Setter Property = "Background" Value = "Transparent" />
        <Setter Property = "BorderBrush" Value = "Transparent" />
        <Setter Property = "BorderThickness" Value = "0" />
        <Setter Property = "MinHeight" Value = "{StaticResource DefaultControlHeight}" />
        <Setter Property = "Foreground" Value = "Black" />
        <Setter Property = "FocusVisualStyle" Value = "{x:Null}" />
        <Setter Property = "Template" >
            <Setter.Value>
                <ControlTemplate TargetType = "ComboBoxItem" >
                    <Border x:Name = "Bd"
                            CornerRadius = "{Binding Path=(hc:BorderElement.CornerRadius),RelativeSource={RelativeSource TemplatedParent}}"
                            BorderBrush = "{TemplateBinding BorderBrush}"
                            BorderThickness = "{TemplateBinding BorderThickness}"
                            Background = "{TemplateBinding Background}" Padding = "{TemplateBinding Padding}"
                            SnapsToDevicePixels = "true" >
                        <ContentPresenter HorizontalAlignment = "{TemplateBinding HorizontalContentAlignment}"
                                          SnapsToDevicePixels = "{TemplateBinding SnapsToDevicePixels}"
                                          VerticalAlignment = "{TemplateBinding VerticalContentAlignment}" >
                            <ContentPresenter.Resources>
                                <Style TargetType = "TextBlock" >
                                    <Setter Property = "TextTrimming" Value = "CharacterEllipsis" />
                                </Style>
                            </ContentPresenter.Resources>
                        </ContentPresenter>
                    </Border>
                    <ControlTemplate.Triggers>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property = "IsSelected" Value = "False" />
                                <Condition Property = "IsMouseOver" Value = "True" />
                            </MultiTrigger.Conditions>
                            <Setter Property = "Background" TargetName = "Bd" Value = "LightGray" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property = "IsSelected" Value = "True" />
                            </MultiTrigger.Conditions>
                            <Setter Property = "Background" TargetName = "Bd" Value = "{DynamicResource PrimaryBrush}" />
                            <Setter Property = "Foreground" Value = "White" />
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <ControlTemplate x:Key = "FlyComboBoxTemplate" TargetType = "ComboBox" >
        <Grid>
            <Grid.ColumnDefinitions>
                <ColumnDefinition
                    Width = "{Binding Path=(hc:InfoElement.TitleWidth),RelativeSource={RelativeSource TemplatedParent}}" />
                <ColumnDefinition />
                <ColumnDefinition Width = "30" />
            </Grid.ColumnDefinitions>
            <DockPanel LastChildFill = "True"
                       Visibility = "{Binding Path=(hc:InfoElement.Title),RelativeSource={RelativeSource TemplatedParent},Converter={StaticResource String2VisibilityConverter}}"
                       HorizontalAlignment = "{Binding Path=(hc:TitleElement.HorizontalAlignment),RelativeSource={RelativeSource TemplatedParent}}"
                       VerticalAlignment = "{Binding Path=(hc:TitleElement.VerticalAlignment),RelativeSource={RelativeSource TemplatedParent}}"
                       Margin = "{Binding Path=(hc:TitleElement.MarginOnTheLeft),RelativeSource={RelativeSource TemplatedParent}}" >
                <ContentPresenter DockPanel.Dock = "Right" TextElement.Foreground = "{DynamicResource DangerBrush}"
                                  Margin = "4,0,0,0"
                                  Content = "{Binding Path=(hc:InfoElement.Symbol),RelativeSource={RelativeSource TemplatedParent}}"
                                  Visibility = "{Binding Path=(hc:InfoElement.Necessary),RelativeSource={RelativeSource TemplatedParent},Converter={StaticResource Boolean2VisibilityConverter}}" />
                <TextBlock hc:TextBlockAttach.AutoTooltip = "True" TextWrapping = "NoWrap"
                           TextTrimming = "CharacterEllipsis"
                           Text = "{Binding Path=(hc:InfoElement.Title),RelativeSource={RelativeSource TemplatedParent}}" />
            </DockPanel>
            <Popup Grid.Column = "1" x:Name = "PART_Popup" PlacementTarget = "{Binding ElementName=toggleButton}"
                   AllowsTransparency = "true" Grid.ColumnSpan = "2"
                   IsOpen = "{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                   Margin = "1"
                   PopupAnimation = "{StaticResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}"
                   Placement = "Bottom" >
                <Decorator Margin = "8 0" >
                    <Border BorderThickness = "0,1,0,0" Effect = "{StaticResource EffectShadow2}" Margin = "0,0,0,8"
                            CornerRadius = "{Binding Path=(hc:BorderElement.CornerRadius),RelativeSource={RelativeSource TemplatedParent}}"
                            x:Name = "dropDownBorder" MinWidth = "{Binding ActualWidth, ElementName=toggleButton}"
                            MaxHeight = "{TemplateBinding MaxDropDownHeight}"
                            BorderBrush = "{DynamicResource BorderBrush}" Background = "White" >
                        <hc:ToggleBlock
                            IsChecked = "{Binding HasItems,RelativeSource={RelativeSource TemplatedParent},Mode=OneWay}"
                            VerticalContentAlignment = "Stretch" HorizontalContentAlignment = "Stretch" >
                            <hc:ToggleBlock.CheckedContent>
                                <ScrollViewer Margin = "2" >
                                    <ItemsPresenter x:Name = "ItemsPresenter"
                                                    ScrollViewer.HorizontalScrollBarVisibility = "Hidden"
                                                    KeyboardNavigation.DirectionalNavigation = "Contained"
                                                    SnapsToDevicePixels = "{TemplateBinding SnapsToDevicePixels}" />
                                </ScrollViewer>
                            </hc:ToggleBlock.CheckedContent>
                            <hc:ToggleBlock.UnCheckedContent>
                                <hc:Empty />
                            </hc:ToggleBlock.UnCheckedContent>
                        </hc:ToggleBlock>
                    </Border>
                </Decorator>
            </Popup>
            <ToggleButton VerticalContentAlignment = "{TemplateBinding VerticalContentAlignment}"
                          HorizontalContentAlignment = "{TemplateBinding HorizontalContentAlignment}"
                          Padding = "{TemplateBinding Padding}"
                          Content = "{Binding Path=(hc:InfoElement.Placeholder),RelativeSource={RelativeSource TemplatedParent}}"
                          Grid.Column = "1" x:Name = "toggleButton" BorderBrush = "{TemplateBinding BorderBrush}"
                          BorderThickness = "{TemplateBinding BorderThickness}"
                          Background = "{TemplateBinding Background}" Grid.ColumnSpan = "2"
                          IsChecked = "{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                          Style = "{StaticResource ComboBoxWatermarkToggleButton}" />
            <Border Grid.Column = "1" Margin = "1,0" >
                <ContentPresenter Margin = "{TemplateBinding Padding}" x:Name = "contentPresenter"
                                  ContentTemplate = "{TemplateBinding SelectionBoxItemTemplate}"
                                  ContentTemplateSelector = "{TemplateBinding ItemTemplateSelector}"
                                  Content = "{TemplateBinding SelectionBoxItem}"
                                  ContentStringFormat = "{TemplateBinding SelectionBoxItemStringFormat}"
                                  HorizontalAlignment = "{TemplateBinding HorizontalContentAlignment}"
                                  IsHitTestVisible = "false"
                                  SnapsToDevicePixels = "{TemplateBinding SnapsToDevicePixels}"
                                  VerticalAlignment = "{TemplateBinding VerticalContentAlignment}" >
                    <ContentPresenter.Resources>
                        <Style TargetType = "TextBlock" >
                            <Setter Property = "TextTrimming" Value = "CharacterEllipsis" />
                        </Style>
                    </ContentPresenter.Resources>
                </ContentPresenter>
            </Border>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property = "HasItems" Value = "false" >
                <Setter Property = "Height" TargetName = "dropDownBorder" Value = "95" />
            </Trigger>
            <Trigger Property = "hc:DropDownElement.ConsistentWidth" Value = "True" >
                <Setter Property = "MaxWidth" TargetName = "dropDownBorder"
                        Value = "{Binding ActualWidth, ElementName=toggleButton}" />
                <Setter Property = "MinWidth" TargetName = "dropDownBorder"
                        Value = "{Binding ActualWidth, ElementName=toggleButton}" />
            </Trigger>
            <Trigger Property = "hc:DropDownElement.AutoWidth" Value = "True" >
                <Setter Property = "MaxWidth" TargetName = "dropDownBorder" Value = "{x:Static system:Double.MaxValue}" />
                <Setter Property = "MinWidth" TargetName = "dropDownBorder"
                        Value = "{Binding ActualHeight, ElementName=toggleButton}" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property = "IsGrouping" Value = "true" />
                    <Condition Property = "VirtualizingPanel.IsVirtualizingWhenGrouping" Value = "false" />
                </MultiTrigger.Conditions>
                <Setter Property = "ScrollViewer.CanContentScroll" Value = "false" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property = "IsMouseOver" Value = "true" SourceName = "toggleButton" />
                    <Condition Property = "IsOpen" Value = "false" SourceName = "PART_Popup" />
                </MultiTrigger.Conditions>
                <Setter Property = "BorderBrush" Value = "{DynamicResource SecondaryBorderBrush}" />
            </MultiTrigger>
            <Trigger Property = "IsOpen" Value = "True" SourceName = "PART_Popup" >
                <Setter Property = "BorderBrush" Value = "{DynamicResource PrimaryBrush}" />
            </Trigger>
            <Trigger Property = "IsFocused" Value = "True" >
                <Setter Property = "BorderBrush" Value = "{DynamicResource PrimaryBrush}" />
            </Trigger>
            <Trigger Property = "IsEnabled" Value = "false" >
                <Setter Property = "Opacity" Value = "0.4" TargetName = "toggleButton" />
                <Setter Property = "Opacity" Value = "0.4" TargetName = "contentPresenter" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
</ResourceDictionary>